1. Прочитать про клиент-серверную архитектуру.
	Клиент-серверная архитектура - это вычислительная или сетевая архитектура, в которой задания или сетевая нагрузка распределены между поставщиками услуг (серверами) и заказчиками (клиентами). 
	Клиент - локальный компьютер на стороне виртуального пользователя, который выполняет отправку запроса к серверу для возможности предоставления данных.
	Сервер - очень мощный компьютер или специальное системное оборудование, которое предназначается для разрешения определенного круга задач по процессу выполнения программных кодов - выполняет работы сервисного обслуживания по клиентским запросам, предоствляет доступ пользователям к определенным системным ресурсам, сохраняет данные или БД. 
	Параметры на стороне сервера:
- хранение, защита и доступ к данным;
- работа с поступающими клиентскими запросами;
- процесс отправки ответа клиенту.
	Параметры на стороне клиента:
- площадка по предоставлению пользовательского графического интерфейса;
- формулировка запроса к серверу и его последующая отправка;
- получение итогов запроса.
	Сетевой протокол - это особый набор правил, на основании которого выполняется точное взаимодействие между компьютерами внутри виртуальной сети.
	Слабый (тонкий) клиент - это компьютер, либо какая-то программа-клиент в сетях с клиент-серверной архитектурой, которая переносит все или бОльшую часть задач по обработке информации на сервер (пример тонкого клиента - браузер). Вся основная бизнес-логика, все вычислительные мощности расположены на компьютере сервера.
	Сильный (толстый) клиент - это такое приложение, которое обеспечивает расширенную функциональность, независимо от центрального сервера. Сервер является лишь хранилищем данных, а вся работа по обработке и представлению этих данных переносится на машину клиента (пример толстого клиента - 1С бухгалтерия, онлайн-игры).
	Двухуровневая клиент-серверная архитектура:
- клиент (предоставляет пользователю графический интерфейс);
- сервер (отвечает за получение входящих запросов и отправку ответа пользователю, применяя собственные ресурсы системы).
	Трехуровневая клиент-серверная архитектура:
- клиент (уровень представления);
- сервер (уровень  бизнес-логики);
- БД (уровень данных).
	Плюсы архитектуры:
1. Мощный сервер дешевле 100+ мощных клиентских машин.
2. Нет дублирования кода.
3. Персональные данные в безопасности.
	Минусы архитектуры:
1. Упало одно звено - все отдыхают.
2. Высокая стоимость оборудования. 
3. Нужно нанимать системного администратора.


2. Что такое HTTP и HTTPS.
	HTTP (HyperText Transfer Protocol - протокол передачи гипертекста) - это прикладной протокол передачи данных в сети, предлагает набор правил и стандартов, которые регулируют способ передачи любой инфо в сети. HTTP предоставляет стандартные правила для взаимодействия веб-браузеров и серверов. Использует 80-й порт. Это сетевой протокол прикладного уровня, созданный поверх TCP.
	HTTPS (HyperText Transfer Protocol Secure) - защищенный протокол передачи гипертекста. Продвинутая и безопасная версия HTTP. Используется 443-й порт. Данный протокол позволяет обеспечить безопасность транзакций путем шифрования всего трафика с помощью SSL. HTTPS также позволяет создать защищенное зашифрованное соединение между сервером и браузером. В протоколе HTTP SSL транзакции согласовываются с помощью алгоритма шифрования на основе ключа. Обычно длина ключа составляет 40 или 128 бит.
	Ключевые различия:
- в HTTP отсутствует механизм защиты для шифрования данных, в то время как HTTPS для защиты связи между сервером и клиентом использует цифровой сертификат SSL или TLS;
- HTTP работает на уровне приложения, а HTTPS - на транспортном уровне;
- HTTP по умолчанию работает по 80-му порту, а HTTPS - через 443-й;
- HTTP передает данные открытым текстом, а HTTPS - зашифрованным;
- HTTP работает быстрее по сравнению с HTTPS, потому что последнему нужно время для шифрования канала связи.


3. HTTP методы.
	Метод HTTP - это последовательность из любых символов, кроме управляющих и разделителей, указывающая на основную операцию над ресурсом. Обычно, метод - это короткое английское слово, записанное заглавными буквами. 
	Если сервер не распознал указанный клиентом метод, то он должен вернуть статус 501 (Not Implemented). Если серверу метод известен, но он не применим к конкретному ресурсу, то возвращается сообщение с кодом 405 (Method Not Allowed).
	Методы:
	GET - используется для запроса содержимого указанного ресурса (получить инфо). 
	POST - применяется для передачи пользовательских данных заданному ресурсу (отправить инфо). Может вызывать побочные эффекты на сервере и изменение состояния. 
	HEAD - аналогичен методу GET, за исключением того, что в ответе сервера отсутствует тело. Запрос HEAD обычно применяется для извлечения метаданных (информация о другой информации, или данные, относящиеся к дополнительной информации о содержимом или обЪекте), проверки наличия ресурса (валидация URL) и чтобы узнать, не изменился ли он с момента последнего обращения.
	PUT - заменяет текущие представления ресурса данными запроса. Применяется для загрузки содержимого запроса на указанный в запросе URI (Uniform Resource Identifier). Если по заданному URI не существует ресурса, то сервер создает его и возвращает статус 201 (Created). Различие методов POST и PUT заключается в понимании предназначений URI ресурсов. Метод POST предполагает, что по указанному URI будет производиться обработка передаваемого клиентом содержимого. Используя PUT, клиент предполагает, что загружаемое содержимое соответствует находящемуся по данному URI ресурсу.
	DELETE - удаляет указанный ресурс.
	PATCH - аналогично PUT, но применяется только к фрагменту ресурса (частично изменяет ресурс).
	TRACE - возвращает полученный запрос так, что клиент может увидеть, какую инфо промежуточные серверы добавляют или изменяют в запросе.
	CONNECT - преобразует соединение запроса в прозрачный TCP/IP-туннель, обычно чтобы содействовать установлению защищенного SSL-соединения через нешифрованный прокси.
	OPTIONS - описывает параметры соединения с ресурсом. Для того, чтобы узнать возможности всего сервера, клиент должен указать в URI звездочку *. 
	Все HTTP Methods разделяют на три большие группы:
1. Безопасные - не меняют данные, можно выполнить их в любой последовательности (GET, HEAD, OPTIONS).
2. Идемпотентные - при повторном выполнении результаты ожидаемо одинаковые (GET, HEAD, PUT, DELETE, OPTIONS, TRACE).
3. Неидемпотентные - при повторном выполнении результаты будут отличаться (POST, PATCH).


4. HTTP статус-коды сервера.
	1хх - Информационный класс (Informational) - Информирование о процессе передачи. 
	2хх - Успех (Success) - Информирование о случаях успешного принятия и обработки запроса клиента. В зависимости от статуса, сервер может еще передать заголовки и тело сообщения.
	3хх - Перенаправление (Redirection) - Сообщает клиенту, что для успешного выполнения операции необходимо сделать другой запрос (как правило, по другому URI). Из данного класса пять кодов - 301, 302, 303, 305 и 307 - относятся непосредственно к перенаправлениям (редирект). Адрес, по которому клиенту следует произвести запрос, сервер указывает в заголовке Location. 
	4хх - Ошибка клиента (Client Error) - Указание ошибок со стороны клиента. При использовании всех методов, кроме HEAD, сервер должен вернуть в теле сообщения гипертекстовое пояснение для пользователя.
	5хх - Ошибка сервера (Server Error) - Информирование о случаях неудачного выполнения операции по вине сервера. Для всех ситуаций, кроме использования метода HEAD, сервер должен включать в тело сообщения обЪяснение, которое клиент отобразит пользователю. 


5. Что такое ядро браузера.
Ядро (движок) браузера - это программа или модуль, который отображает контент на основе языка разметки; представляет собой программу, преобразующую содержимое веб-страниц (файлы HTML, XML, цифровые изображения) и информацию о форматировании (в форматах CSS, XSL) в интерактивное изображение форматированного содержимого на экране.

6. Какие браузеры какие ядра используют.
Blink - Google Chrome, Opera 15+, Microsoft Edge
EdgeHTML - Microsoft Edge
Gecko - Mozilla Firefox
GtkHTML - Novell Evolution
KHTML - Konqueror
Presto - Opera
Prince XML - Prince XML
Robin - The Bat!
Tasman - Microsoft Entourage
Trident - Internet Explorer
WebKit - Google, Chrome, Safari
XEP - XEP

7. Что такое API.
API (Application Programming Interface - программный интерфейс приложения) - это специальный протокол (договор, контракт) для взаимодействия компьютерных программ, который позволяет использовать функции одного приложения внутри другого.

8. Что такое эндпоинты.
Эндпоинт (конечная точка) - представляет собой некий шлюз, который соединяет серверные процессы приложения с внешним интерфейсом. Простыми словами, это адрес, на который отправляются сообщения. 

9. URL (URI, URL, URN).
URL (Uniform Resource Locator) - уникальный адрес сайта в сети, который определяет его местонахождение в сети Интернет. 
URN (Uniform Resource Name) - неизменяемая последовательность символов, определяющая только имя некоторого ресурса; это имя определяет только название самого ресурса, но не говорит, как к нему подключиться.
URI (Uniform Resource Identifier) - уникальный идентификатор; это обобщенное понятие множества идентификаций нашего ресурса, которое включает как URL, так и URN, и может включать их по отдельности, либо все вместе.

                  URI
http://www.webdew.com/accueil/index.html
        URL              URN


10. Идемпотентные HTTP методы.
Метод считается "идемпотентным", если эффект на сервер от одного запроса такой же, как от нескольких идентичных запросов такого типа. 
Идемпотентные методы: DELETE, GET, HEAD, OPTIONS, TRACE, PUT.

11. Безопасные HTTP методы.
Метод является "безопасным", если он не меняет состояние сервера. Другими словами, безопасный метод проводит операции "только чтение" (read-only). 
Безопасные методы: GET, HEAD, OPTIONS.

12. Идентификация, Аутентификация, Авторизация.
Идентификация - процесс распознавания пользователя по его идентификатору; процедура, в результате выполнения которой для субЪекта идентификации выявляется его идентификатор, однозначно определяющий этого субЪекта в информационной системе (например, email, логин, имя, номер телефона, номер паспорта, номер страницы в соц сети).
Аутентификация - процедура проверки подлинности, доказательство что пользователь именно тот, за кого себя выдает; процедура проверки подлинности, например проверка подлинности пользователя путем сравнения введенного им пароля с паролем, сохраненным в базе данных (например, пароль, PIN-код, биометрические данные).
Авторизация - предоставление определенных прав доступа; проедоставление определенному лицу прав на выполнение определенных действий (например, к своей учетной записи, личной странице).

13. Что такое IP.
IP-адрес - это уникальный сетевой адрес, идентифицирующий устройство в интернете или локальной сети. IP означает "Интернет-протокол" - набор правил, регулирующих формат данных, отправляемых через интернет или локальную сеть. По сути, IP-адрес - это идентификатор, позволяющий передавать информацию между устройствами в сети: он содержит информацию о местоположении устройства и обеспечивает его доступность для связи. 
IP-адрес - это строка чисел, разделенных точками. IP-адреса представляют собой набор из четырех чисел, например 192.158.1.38. Каждое число в этом наборе принадлежит интервалу от 0 до 255. 

14. Что такое октеты в DNS.
IP-адрес состоит из четырех частей, записанных в видедесятичных чисел с точками (например, 192.168.1.1). Каждую из этих четырех частей называют октетом. Октет представляет собой восемь цифр в двоичной системе (например, 11000000) или число 192 в десятичной системе. 
Таким образом, каждый октет может принимать в двоичном виде значения от 00000000 до 11111111, или от 0 до 255 в десятичном виде. 
В примере 192.168.1.1 - первые три октета - 192.168.1 - представляют собой номер сети, а четвертый октет - 1 - идентификатор хоста.

15. Что такое порт, сколько портов у Linux сервера.
Порт сервера - это цифровой идентификатор (набор цифр до 16 Бит) программы, которая используется для создания определенного интернет-соединения, привязанного к IP-адресу.
Каждое устройство, имеющее выход в сеть, имеет свой IP. Он нужен для того, чтобы запрошенные данные были направлены именно на ваш ПК. Порты служат для установления нескольких таких соединений. В свою очередь, с помощью них сервер, на котром расположен сайт, создает соединение сервер => ПК.
Поскольку сервера являются достаточно мощными вычислительными машинами, на них установлено некоторое количество программных приложений, позволяющих ускорить процесс обработки данных. К этим приложениям относятся:
-обеспечивающий доступ к интернет ресурсам веб-сервер;
-отвечающий за рассылку писем почтовый сервер;
-служащий для обмена файлами FTP-сервер.
IP-адрес в данном случае служит идентификатором сервера. В случае использования только IP для попытки связаться с онлайн-ресурсом, компьютер точно не определит необходимое приложение. В виду этого выведение необходимой информации, передача данных или сообщений не возможны, поскольку точный адрес не известен. 
Данную проблему помогают решить цифровые идентификаторы портов. Ваш ПК сначала распознает IP сервера, а затем идентификатор порта самого FTP-сервера для соединения с приложением FTP-сервера. При обратной связи подключение происходит аналогично.
По умолчанию в протоколе HTTP используется порт 80, а в протоколе HTTPS - порт 443. URL вида http://www.example.com:8080/path/ указывает, что веб-ресурс обслуживается веб-сервером на порту 8080.

16. Уровни OSI.
Сетевая модель OSI (The Open Systems Interconnection model) - сетевая модель стека (магазина) сетевых протоколов OSI/ISO. Посредством данной модели различные сетевые устройства могут взаимодействовать друг с другом. Модель определяет различные уровни взаимодействия систем. Каждый уровень выполняет определенные функции при таком ваимодействии.
Семь уровней OSI:
7). Приложения - на седьмом этаже, на самой верхушке айсберга, обитает уровень приложений. Тут находятся сетевые службы, которые позволяют нам, как конечным пользователям, серфить просторы интернета.
6). Представления - на шестом уровне творится преобразование форматов сообщений, такое как кодирование или сжатие. Тут живут JPEG и GIF, например.
5). Сеансовый - занимается тем, что управляет соединениями, или попросту говоря, сессиями. Он их разрывает.
4). Транспортный - обеспечивает передачу данных по сети. Здесь две основных рок-звезды: TCP и UDP. Разница в том, что различный транспорт применяется для разной категории трафика.
3). Сетевой - сетевой уровень вводит термин "маршрутизация" и, соответственно, IP-адрес. Для преобразования IP-адресов в MAC-адреса и обратно используется протокол ARP.
2). Канальный - на втором уровне мы оперируем понятием "фрейм", или как еще говорят "кадр". Тут появляются первые идентификаторы - MAC-адреса. Они состоят из 48 бит и выглядят примерно так: 00:16:52:00:1f:03.
1). Физический - на первом уровне модели OSI происходит передача физических сигналов (токов, света, радио) от источника к получателю. На этом уровне мы оперируем кабелями, контактами в разЪемах, кодированием единиц и нулей, модуляцией и т.д.

17. Хедеры http запросов.
Хедеры (заголовки, HTTP headers) HTTP - это строки в HTTP-сообщении, содержащие разделенную двоеточием пару имя-значение (или ключ-значение). Формат заголовков соответствует общему формату заголовков текстовых сетевых сообщений ARPA. Заголовки должны отделяться от тела сообщения хотя бы одной пустой строкой. 
Все хедеры разделяются на четыре основных группы:
1). General Headers (Основные заголовки) - должны включаться в любое сообщение клиента и сервера.
2). Request Headers (Заголовки запроса) - используются только в запросах клиента.
3). Response Headers (Заголовки ответа) - только для ответов от сервера.
4). Entity Headers (Заголовки сущности) - сопровождают каждую сущность сообщения.
