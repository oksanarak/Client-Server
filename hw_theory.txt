1. Прочитать про клиент-серверную архитектуру.
	Клиент-серверная архитектура - это вычислительная или сетевая архитектура, в которой задания или сетевая нагрузка распределены между поставщиками услуг (серверами) и заказчиками (клиентами). 
	Клиент - локальный компьютер на стороне виртуального пользователя, который выполняет отправку запроса к серверу для возможности предоставления данных.
	Сервер - очень мощный компьютер или специальное системное оборудование, которое предназначается для разрешения определенного круга задач по процессу выполнения программных кодов - выполняет работы сервисного обслуживания по клиентским запросам, предоствляет доступ пользователям к определенным системным ресурсам, сохраняет данные или БД. 
	Параметры на стороне сервера:
- хранение, защита и доступ к данным;
- работа с поступающими клиентскими запросами;
- процесс отправки ответа клиенту.
	Параметры на стороне клиента:
- площадка по предоставлению пользовательского графического интерфейса;
- формулировка запроса к серверу и его последующая отправка;
- получение итогов запроса.
	Сетевой протокол - это особый набор правил, на основании которого выполняется точное взаимодействие между компьютерами внутри виртуальной сети.
	Слабый (тонкий) клиент - это компьютер, либо какая-то программа-клиент в сетях с клиент-серверной архитектурой, которая переносит все или бОльшую часть задач по обработке информации на сервер (пример тонкого клиента - браузер). Вся основная бизнес-логика, все вычислительные мощности расположены на компьютере сервера.
	Сильный (толстый) клиент - это такое приложение, которое обеспечивает расширенную функциональность, независимо от центрального сервера. Сервер является лишь хранилищем данных, а вся работа по обработке и представлению этих данных переносится на машину клиента (пример толстого клиента - 1С бухгалтерия, онлайн-игры).
	Двухуровневая клиент-серверная архитектура:
- клиент (предоставляет пользователю графический интерфейс);
- сервер (отвечает за получение входящих запросов и отправку ответа пользователю, применяя собственные ресурсы системы).
	Трехуровневая клиент-серверная архитектура:
- клиент (уровень представления);
- сервер (уровень  бизнес-логики);
- БД (уровень данных).
	Плюсы архитектуры:
1. Мощный сервер дешевле 100+ мощных клиентских машин.
2. Нет дублирования кода.
3. Персональные данные в безопасности.
	Минусы архитектуры:
1. Упало одно звено - все отдыхают.
2. Высокая стоимость оборудования. 
3. Нужно нанимать системного администратора.


2. Что такое HTTP и HTTPS.
	HTTP (HyperText Transfer Protocol - протокол передачи гипертекста) - это прикладной протокол передачи данных в сети, предлагает набор правил и стандартов, которые регулируют способ передачи любой инфо в сети. HTTP предоставляет стандартные правила для взаимодействия веб-браузеров и серверов. Использует 80-й порт. Это сетевой протокол прикладного уровня, созданный поверх TCP.
	HTTPS (HyperText Transfer Protocol Secure) - защищенный протокол передачи гипертекста. Продвинутая и безопасная версия HTTP. Используется 443-й порт. Данный протокол позволяет обеспечить безопасность транзакций путем шифрования всего трафика с помощью SSL. HTTPS также позволяет создать защищенное зашифрованное соединение между сервером и браузером. В протоколе HTTP SSL транзакции согласовываются с помощью алгоритма шифрования на основе ключа. Обычно длина ключа составляет 40 или 128 бит.
	Ключевые различия:
- в HTTP отсутствует механизм защиты для шифрования данных, в то время как HTTPS для защиты связи между сервером и клиентом использует цифровой сертификат SSL или TLS;
- HTTP работает на уровне приложения, а HTTPS - на транспортном уровне;
- HTTP по умолчанию работает по 80-му порту, а HTTPS - через 443-й;
- HTTP передает данные открытым текстом, а HTTPS - зашифрованным;
- HTTP работает быстрее по сравнению с HTTPS, потому что последнему нужно время для шифрования канала связи.


3. HTTP методы.
	Метод HTTP - это последовательность из любых символов, кроме управляющих и разделителей, указывающая на основную операцию над ресурсом. Обычно, метод - это короткое английское слово, записанное заглавными буквами. 
	Если сервер не распознал указанный клиентом метод, то он должен вернуть статус 501 (Not Implemented). Если серверу метод известен, но он не применим к конкретному ресурсу, то возвращается сообщение с кодом 405 (Method Not Allowed).
	Методы:
	GET - используется для запроса содержимого указанного ресурса (получить инфо). 
	POST - применяется для передачи пользовательских данных заданному ресурсу (отправить инфо). Может вызывать побочные эффекты на сервере и изменение состояния. 
	HEAD - аналогичен методу GET, за исключением того, что в ответе сервера отсутствует тело. Запрос HEAD обычно применяется для извлечения метаданных (информация о другой информации, или данные, относящиеся к дополнительной информации о содержимом или обЪекте), проверки наличия ресурса (валидация URL) и чтобы узнать, не изменился ли он с момента последнего обращения.
	PUT - заменяет текущие представления ресурса данными запроса. Применяется для загрузки содержимого запроса на указанный в запросе URI (Uniform Resource Identifier). Если по заданному URI не существует ресурса, то сервер создает его и возвращает статус 201 (Created). Различие методов POST и PUT заключается в понимании предназначений URI ресурсов. Метод POST предполагает, что по указанному URI будет производиться обработка передаваемого клиентом содержимого. Используя PUT, клиент предполагает, что загружаемое содержимое соответствует находящемуся по данному URI ресурсу.
	DELETE - удаляет указанный ресурс.
	PATCH - аналогично PUT, но применяется только к фрагменту ресурса (частично изменяет ресурс).
	TRACE - возвращает полученный запрос так, что клиент может увидеть, какую инфо промежуточные серверы добавляют или изменяют в запросе.
	CONNECT - преобразует соединение запроса в прозрачный TCP/IP-туннель, обычно чтобы содействовать установлению защищенного SSL-соединения через нешифрованный прокси.
	OPTIONS - описывает параметры соединения с ресурсом. Для того, чтобы узнать возможности всего сервера, клиент должен указать в URI звездочку *. 
	Все HTTP Methods разделяют на три большие группы:
1. Безопасные - не меняют данные, можно выполнить их в любой последовательности (GET, HEAD, OPTIONS).
2. Идемпотентные - при повторном выполнении результаты ожидаемо одинаковые (GET, HEAD, PUT, DELETE, OPTIONS, TRACE).
3. Неидемпотентные - при повторном выполнении результаты будут отличаться (POST, PATCH).


4. HTTP статус-коды сервера.
	1хх - Информационный класс (Informational) - Информирование о процессе передачи. 
	2хх - Успех (Success) - Информирование о случаях успешного принятия и обработки запроса клиента. В зависимости от статуса, сервер может еще передать заголовки и тело сообщения.
	3хх - Перенаправление (Redirection) - Сообщает клиенту, что для успешного выполнения операции необходимо сделать другой запрос (как правило, по другому URI). Из данного класса пять кодов - 301, 302, 303, 305 и 307 - относятся непосредственно к перенаправлениям (редирект). Адрес, по которому клиенту следует произвести запрос, сервер указывает в заголовке Location. 
	4хх - Ошибка клиента (Client Error) - Указание ошибок со стороны клиента. При использовании всех методов, кроме HEAD, сервер должен вернуть в теле сообщения гипертекстовое пояснение для пользователя.
	5хх - Ошибка сервера (Server Error) - Информирование о случаях неудачного выполнения операции по вине сервера. Для всех ситуаций, кроме использования метода HEAD, сервер должен включать в тело сообщения обЪяснение, которое клиент отобразит пользователю. 


5. Что такое ядро браузера.
Браузер=оболочка+ядро
Ядро - это программа или модуль, который отображает контент на основе языка разметки. Ядро браузера можно разделить на две части: движок рендеринга (инженер макета или движок рендеринга) и движок JS. Он отвечает за получение содержимого веб-страницы (HTML, XML, изображения), организацию информации (добавление CSS) и расчет режима отображения веб-страницы, а затем вывод ее на монитор. 

6. Какие браузеры какие ядра используют.
Internet Explorer - Trident
Firefox - Gecko
Opera - Blink+V8
Safari - Webkit
Chrome - Blink+V8
Sogou - Trident+WebKit


